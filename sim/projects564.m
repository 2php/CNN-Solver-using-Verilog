clear all

% IA is the Input Array, 12x12 of int16's
IA = [
 12579   -3150   15584   18357   17791   -2942   11576  -10913  -17007    5883  -16281    4586  ;
 17282   -2288   13897  -15256   14622   -8114    4530     354   10408   -2975   -9824   -4870  ;
-15713   -1399    5228   -7920   16784  -13830  -19651    7785  -11515  -14584    9978  -18716  ;
  7204   10017    2416    6906   11613    5368  -14010    1150  -14404  -11842    -988   -3131  ;
 -1294  -16093   14075     674   17598  -10939   12993  -10468    2774   14857  -10516    8477  ;
  1046  -16696    7316   -8374   17078    2488   -6603   -3255   16833   -5312  -17074  -14117  ;
 -7497   10285   15998   17310   -6240  -10261   11635   -8166   -1298   -9664   19437  -10346  ;
  1803   -7383    3043   11441   -8204  -15498    3125    6197    6087  -14690   10023     350  ;
  4652   15106    9792    6845  -14539     526   -2263  -11101  -19570   -9435   14624  -13441  ;
-12763  -17856   -2607  -17508  -12639    9767   -9820   18726  -18579   11375   -3556    2414  ;
 -6442    8947  -13008    6905   -4020   -2138   15799  -15314    5561   10729    5826   -4808  ;
-18724   18980   14963    4153  -13879   17325    -539  -17869  -11901    8844  -17182   18942  ;
]
% B contains the 1x9 step 1 filters
B = [
-13435   18765   -5643  -17177   -6822  -10447    9571   14312   -1344  ;
 16548   13336   10838   18696   -3168  -17654   12477  -12215    9841  ;
 17993   16168   16844   11142    8397   -9046   -1313  -16437    -664  ;
 -3392    5206   13799  -15760  -19918   -2012   19412    -681    6108  ;
]

% M contains the 1x64 step 2 filters
M = [
  6552    -800   -3633    6451  -14670    2147   14429   16916   -7814    9927   -7934    8302   12070   15606   -5184  -19316    7053  -11087   -2160  -19321  -17148  -17229   -5819   17906    7947   10611     778   16963   -9775    8800  -11410   -9511   16682   12481    3719    -377   -3268     500  -13696   -5190   -2846   -4759   12944   15168   13738   13869    4613  -10473   -9678    7692  -14696   19406   16754   13321   12251    1078    6424    4556   -6934  -13128   13072    1582   14382  -12906  
 12481    3719    -377   -3268     500  -13696   -5190   -2846   -4759   12944   15168   13738   13869    4613  -10473   -9678    7692  -14696   19406   16754   13321   12251    1078    6424    4556   -6934  -13128   13072    1582   14382  -12906   -1719   13430    4099   17376   15135      82   -3912   12554   17096   -2388   -7901    1226     192   -1372   19951    9621   -8650   -3577   10042    5175  -10450   -8363   19708   11848  -15060   -5477    6772  -17179    5035   -9371   10397   14399    4601  
  4099   17376   15135      82   -3912   12554   17096   -2388   -7901    1226     192   -1372   19951    9621   -8650   -3577   10042    5175  -10450   -8363   19708   11848  -15060   -5477    6772  -17179    5035   -9371   10397   14399    4601    4653    3141   16705  -11752   -1081    4460   18390  -18435  -14048  -14382    -956   -7805   14318   18415  -14857  -16649    5785    9625   17440   -2441   -8158      60  -17944    7089    3595   -6087   17463    5771    4848    6052  -14606   11214  -18554  
 16705  -11752   -1081    4460   18390  -18435  -14048  -14382    -956   -7805   14318   18415  -14857  -16649    5785    9625   17440   -2441   -8158      60  -17944    7089    3595   -6087   17463    5771    4848    6052  -14606   11214  -18554   -9802   16875     -74   18206   17451    2992   15689    6901   -6276   -4785    8315    2677   -6945  -18381  -10808  -15845   17088   15546   12952  -10774   -4272   -8985   -1767  -12301   -8910     720   12795  -16903   -5940  -10449   13352   16556   -3178  
   -74   18206   17451    2992   15689    6901   -6276   -4785    8315    2677   -6945  -18381  -10808  -15845   17088   15546   12952  -10774   -4272   -8985   -1767  -12301   -8910     720   12795  -16903   -5940  -10449   13352   16556   -3178   18727  -17934   17382  -12850   12813   18484   -9414    -694   13048   16368    3355  -18129   -9544   12317   12066   12346  -16019    7482   -5032  -13298   -5429   -7977   -8828    -423   17239    1692   17681   -5198   17701    1989     334  -19044    1651  
 17382  -12850   12813   18484   -9414    -694   13048   16368    3355  -18129   -9544   12317   12066   12346  -16019    7482   -5032  -13298   -5429   -7977   -8828    -423   17239    1692   17681   -5198   17701    1989     334  -19044    1651   14863    7012  -15411   -5684    3241    9164  -18961  -18871  -11400    5662    5821   14534    9726   -8166   17357   -8168  -11369     418   18802    7888   -3270   -8276    1313  -13767  -19231   -6484   10269   12214   12310   18349    4042   -2632    2873  
-15411   -5684    3241    9164  -18961  -18871  -11400    5662    5821   14534    9726   -8166   17357   -8168  -11369     418   18802    7888   -3270   -8276    1313  -13767  -19231   -6484   10269   12214   12310   18349    4042   -2632    2873   14739   11319   18443  -18816   17807  -17250    9880   14769   -6547   19831    1443  -13984   18314   16567  -18416   -5596   13145   11921    4800    8479  -16934  -14679   -9020    6263   -9520   15951   -3107   -7797   -2818   19111   18960  -11103  -16974  
 18443  -18816   17807  -17250    9880   14769   -6547   19831    1443  -13984   18314   16567  -18416   -5596   13145   11921    4800    8479  -16934  -14679   -9020    6263   -9520   15951   -3107   -7797   -2818   19111   18960  -11103  -16974  -19153   -6163   -7099   -5274  -12097    4769  -15841  -14077   16502   -4121   -9038  -13169   16474  -11986   19217   -1112    3041   17322   15436    4818   -5102    6492    7659   -9416   12056   12759   11542  -18679    6085   19202    5663    6544  -18406  
]

% Extract the four 6x6 regions of the input array, we will calls these Quadrants
Quadrant0 = IA(1:6,1:6)
Quadrant = Quadrant0
Quadrant(:,:,2) = IA(1:6,7:12)
Quadrant(:,:,3) = IA(7:12,1:6)
Quadrant(:,:,4) = IA(7:12,7:12)

% Perform a dot-product of the b-vector with each corner of the ROI

C = zeros(2,2);
for layer = 1:4
    for QuadrantN = 1:4
        
        A_1_1  = [Quadrant(1,1:3,QuadrantN) Quadrant(2,1:3,QuadrantN) Quadrant(3,1:3,QuadrantN)];
        A_1_2  = [Quadrant(1,4:6,QuadrantN) Quadrant(2,4:6,QuadrantN) Quadrant(3,4:6,QuadrantN)];
        A_2_1  = [Quadrant(4,1:3,QuadrantN) Quadrant(5,1:3,QuadrantN) Quadrant(6,1:3,QuadrantN)];
        A_2_2  = [Quadrant(4,4:6,QuadrantN) Quadrant(5,4:6,QuadrantN) Quadrant(6,4:6,QuadrantN)];
        C(1,1) = A_1_1*B(layer,:)';
        C(1,2) = A_1_2*B(layer,:)';
        C(2,1) = A_2_1*B(layer,:)';
        C(2,2) = A_2_2*B(layer,:)';
        
        % apply f(x) and truncate
        sign_C_1_1  = sign(C(1,1)) ;
        C_1_1  = dec2bin(abs(C(1,1)),32) ;
        C_1_1  = C_1_1(1:16) ;
        C_1_1  = bin2dec(C_1_1) ;
        C(1,1)  = sign_C_1_1*C_1_1;
        sign_C_1_2  = sign(C(1,2)) ;
        C_1_2  = dec2bin(abs(C(1,2)),32) ;
        C_1_2  = C_1_2(1:16) ;
        C_1_2  = bin2dec(C_1_2) ;
        C(1,2)  = sign_C_1_2*C_1_2;
        sign_C_2_1  = sign(C(2,1)) ;
        C_2_1  = dec2bin(abs(C(2,1)),32) ;
        C_2_1  = C_2_1(1:16) ;
        C_2_1  = bin2dec(C_2_1) ;
        C(2,1)  = sign_C_2_1*C_2_1;
        sign_C_2_2  = sign(C(2,2)) ;
        C_2_2  = dec2bin(abs(C(2,2)),32) ;
        C_2_2  = C_2_2(1:16) ;
        C_2_2  = bin2dec(C_2_2) ;
        C(2,2)  = sign_C_2_2*C_2_2;

        Z = max(0,C)
        
        Zq(:,:,layer,QuadrantN) = Z;
        
    end
end

% Now operate on the four 2x2x4 quadrants as if it were a 4x4x4 array
% Our matlab quadrant array is organized as (y,x,ROI,layer)
% So lets just merge them
% Remember, a layer is generated from each B vector
for layer = 1:4
    Zmerged(:,:,layer) = [Zq(:,:,layer,1) Zq(:,:,layer,2) ;
                          Zq(:,:,layer,3) Zq(:,:,layer,4) ]
end

% Create a 1x64 vector from a merged array
% We create the vector using row major layer by layer
%
% use reshape on the transpose because reshape uses column major
U = [];
for layer = 1:4
    U = [U reshape(Zmerged(:,:,layer)', [1 16])];
end

% Now dot-product Qv with each output m-vector
W = [];
for o = 1:8
    W = [W M(o,:)*U'];
end

% Now apply our f(x)
O = max(0,W);
% truncate
O = O/(2^16);
% Expected output
O

